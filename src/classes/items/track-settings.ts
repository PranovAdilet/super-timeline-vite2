import { Rect } from "fabric";

export type TrackSettingsItemProps = {
  id: string;
  top: number;
  left: number;
  items: string[];
  trackId: string;
} & Pick<Rect, "top" | "left" | "width" | "height">;

export class TrackSettingsObject extends Rect {
  static ownDefaults: Partial<Rect> = {
    selectable: true,
    evented: true,
    strokeWidth: 0,
    stroke: "transparent",
    hasControls: false,
    hasBorders: false,
    lockMovementX: true,
    lockMovementY: true,
    hoverCursor: "default",
  };

  trackId: string;
  isSelected = false;

  static type = "tracksettings";

  id: string;
  //   items: string[];

  borderColor = "transparent";
  stroke = "transparent";
  strokeWidth = 0;

  constructor(props: TrackSettingsItemProps) {
    super(props);
    Object.assign(this, TrackSettingsObject.ownDefaults);
    this.id = props.trackId;

    this.trackId = props.trackId;
    // this.items = props.items || [];
  }

  public _render(ctx: CanvasRenderingContext2D) {
    super._render(ctx);
    this.updateSelected(ctx);

    const path = new Path2D(
      `M9.143 0.283999C8.7614 0.346978 8.41033 0.531458 8.142 0.809999C7.761 1.191 7.657 1.449 7.498 2.397C7.463 2.605 7.418 2.806 7.398 2.844C7.301 3.025 6.994 3.158 6.79 3.106C6.741 3.093 6.493 2.936 6.24 2.757C5.688 2.364 5.449 2.252 5.058 2.197C4.69624 2.14305 4.32665 2.20244 4 2.367C3.787 2.469 3.626 2.605 3.113 3.116C2.41 3.815 2.283 4.013 2.195 4.552C2.105 5.107 2.255 5.557 2.766 6.261C2.91 6.46 3.051 6.665 3.078 6.717C3.18 6.906 3.044 7.291 2.837 7.402C2.794 7.425 2.509 7.487 2.203 7.541C1.93962 7.58404 1.67938 7.64451 1.424 7.722C1.042 7.865 0.642999 8.236 0.441999 8.634C0.293999 8.927 0.240999 9.287 0.240999 10C0.240999 11.031 0.355999 11.404 0.815999 11.864C1.196 12.243 1.417 12.331 2.42 12.499C2.813 12.565 2.933 12.631 3.046 12.841C3.164 13.061 3.142 13.2 2.942 13.486C2.317 14.379 2.222 14.568 2.178 15.001C2.145 15.33 2.207 15.665 2.363 15.998C2.465 16.216 2.59 16.365 3.113 16.887C3.811 17.586 4.01 17.714 4.529 17.802C5.049 17.889 5.448 17.782 5.992 17.41L6.574 17.013C6.797 16.86 6.955 16.844 7.159 16.954C7.369 17.066 7.431 17.185 7.499 17.6C7.653 18.54 7.761 18.808 8.136 19.184C8.596 19.644 8.969 19.759 10 19.759C11.031 19.759 11.404 19.644 11.864 19.184C12.235 18.812 12.346 18.541 12.479 17.68C12.505 17.515 12.544 17.321 12.566 17.25C12.646 16.991 13.06 16.802 13.283 16.922C13.335 16.949 13.54 17.09 13.739 17.234C14.451 17.75 14.888 17.897 15.441 17.805C15.987 17.715 16.185 17.59 16.887 16.887C17.59 16.185 17.715 15.988 17.806 15.44C17.896 14.889 17.764 14.493 17.243 13.76C17.064 13.507 16.907 13.259 16.894 13.21C16.858 13.067 16.915 12.853 17.023 12.724C17.136 12.589 17.255 12.545 17.68 12.479C18.545 12.346 18.812 12.235 19.19 11.858C19.64 11.408 19.759 11.017 19.759 10C19.759 9.681 19.741 9.303 19.718 9.16C19.614 8.507 19.127 7.914 18.518 7.699C18.2783 7.63319 18.0353 7.58012 17.79 7.54C17.488 7.487 17.206 7.425 17.164 7.402C16.975 7.301 16.841 6.998 16.894 6.79C16.907 6.741 17.064 6.493 17.243 6.24C17.764 5.507 17.896 5.111 17.806 4.56C17.715 4.012 17.59 3.815 16.888 3.116C16.369 2.599 16.215 2.469 16 2.368C15.673 2.20447 15.3039 2.1448 14.942 2.197C14.551 2.252 14.312 2.364 13.76 2.757C13.507 2.936 13.259 3.093 13.21 3.106C13.067 3.142 12.853 3.085 12.724 2.977C12.589 2.864 12.545 2.745 12.479 2.32C12.346 1.459 12.235 1.187 11.865 0.817999C11.585 0.529188 11.2178 0.34049 10.82 0.280999C10.486 0.233999 9.476 0.235999 9.143 0.283999ZM10.783 1.852C10.878 1.934 10.9 2.006 10.983 2.495C11.122 3.317 11.218 3.559 11.558 3.931C11.961 4.371 12.486 4.605 13.076 4.609C13.634 4.612 13.873 4.517 14.596 4.004C15.233 3.551 15.203 3.547 15.828 4.172C16.452 4.795 16.447 4.763 15.996 5.402C15.539 6.049 15.469 6.195 15.399 6.66C15.335 7.08 15.469 7.646 15.727 8.05C15.898 8.318 16.258 8.633 16.548 8.769C16.717 8.848 16.997 8.922 17.426 8.999C18.279 9.152 18.24 9.103 18.24 10.005V10.686L18.13 10.796C18.036 10.889 17.955 10.916 17.58 10.976C16.712 11.115 16.44 11.22 16.069 11.558C15.7785 11.8232 15.5685 12.1649 15.4629 12.5438C15.3573 12.9228 15.3605 13.3238 15.472 13.701C15.536 13.909 15.662 14.125 15.996 14.598C16.447 15.237 16.452 15.205 15.828 15.828C15.199 16.458 15.243 16.453 14.542 15.961C13.909 15.517 13.705 15.433 13.195 15.409C12.9218 15.3905 12.6476 15.4277 12.3892 15.5185C12.1308 15.6093 11.8936 15.7517 11.692 15.937C11.278 16.309 11.129 16.635 10.986 17.487C10.854 18.268 10.891 18.24 10 18.24C9.102 18.24 9.147 18.277 8.997 17.426C8.859 16.642 8.744 16.377 8.389 16.022C8.19594 15.8236 7.9648 15.6663 7.70945 15.5594C7.45411 15.4525 7.17981 15.3983 6.903 15.4C6.34 15.401 6.123 15.488 5.404 15.997C4.767 16.449 4.797 16.453 4.172 15.828C3.547 15.203 3.551 15.233 4.003 14.596C4.1464 14.3979 4.28119 14.1937 4.407 13.984C4.807 13.213 4.595 12.155 3.921 11.548C3.558 11.222 3.268 11.112 2.42 10.976C2.045 10.916 1.964 10.889 1.87 10.796L1.76 10.686V10.005C1.76 9.101 1.723 9.147 2.574 8.997C3.009 8.921 3.278 8.851 3.451 8.769C4.447 8.3 4.906 6.979 4.407 6.016C4.2811 5.8057 4.14631 5.60085 4.003 5.402C3.553 4.763 3.548 4.795 4.172 4.172C4.795 3.548 4.763 3.553 5.402 4.004C5.654 4.182 5.93 4.364 6.016 4.408C6.8 4.81 7.841 4.597 8.466 3.906C8.754 3.588 8.87 3.296 8.997 2.574C9.147 1.723 9.102 1.76 10 1.76C10.647 1.76 10.68 1.764 10.783 1.852ZM9.595 6.282C9.135 6.332 8.822 6.424 8.38 6.639C7.32 7.153 6.64 7.999 6.35 9.16C6.23198 9.71378 6.23198 10.2862 6.35 10.84C6.533 11.573 6.843 12.127 7.358 12.642C8.088 13.372 8.964 13.734 10 13.734C11.036 13.734 11.912 13.372 12.642 12.642C13.372 11.912 13.734 11.036 13.734 10C13.734 8.411 12.808 7.076 11.293 6.485C10.852 6.312 10.122 6.225 9.595 6.282ZM10.556 7.822C10.934 7.911 11.263 8.103 11.58 8.42C12.034 8.874 12.239 9.365 12.239 10C12.239 10.635 12.034 11.126 11.58 11.58C11.124 12.036 10.636 12.24 10 12.24C9.364 12.24 8.876 12.036 8.42 11.58C7.966 11.126 7.761 10.635 7.761 10C7.761 9.365 7.966 8.874 8.42 8.42C8.73 8.11 9.066 7.911 9.425 7.823C9.7982 7.74765 10.1827 7.74731 10.556 7.822Z`
    );

    ctx.save();
    ctx.translate(-9, -10);
    ctx.clip();

    ctx.fillStyle = "#A0A4A2";
    ctx.fill(path);
    ctx.restore();
  }

  static getDefaults(): Record<string, any> {
    return { ...super.getDefaults(), ...TrackSettingsObject.ownDefaults };
  }

  setSelected(isSelected: boolean) {
    this.isSelected = isSelected;
    this.set({ dirty: true });
  }

  updateSelected(ctx: CanvasRenderingContext2D) {
    if (this.isSelected) {
      ctx.save();
      ctx.beginPath();
      ctx.roundRect(
        -this.width / 2,
        -this.height / 2,
        this.width,
        this.height,
        6
      );
      ctx.lineWidth = 2;
      ctx.strokeStyle = "rgba(0, 216, 214,1.0)";
      ctx.stroke();
      ctx.restore();
    }
  }

  updateCoords(size: number): void {
    this.width = size;
  }
}
